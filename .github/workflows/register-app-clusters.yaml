name: Register Application Clusters

on:
  workflow_run:
    workflows: ["Provision Application Cluster"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to register (dev, staging, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      cluster_name:
        description: 'Name of the cluster to register'
        required: true
        default: 'app'
        type: string

env:
  ENVIRONMENT: dev
  CLUSTER_NAME: app
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  register:
    name: 'Register GKE Cluster with ArgoCD'
    runs-on: ubuntu-latest
    # Only run if the Provision Application Cluster workflow was successful or if this is manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment from workflow dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ github.event.inputs.cluster_name }}" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Download terraform outputs
        uses: actions/download-artifact@v3
        with:
          name: terraform-outputs-${{ env.ENVIRONMENT }}
          path: ./artifacts

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl to management cluster
        run: |
          mkdir -p $HOME/.kube
          cp ./artifacts/kubeconfig $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl get nodes

      - name: Get application cluster credentials
        run: |
          gcloud container clusters get-credentials ${{ env.ENVIRONMENT }}-${{ env.CLUSTER_NAME }} --region us-central1
          
          # Extract and save the application cluster kubeconfig
          # We need this for registering the cluster with ArgoCD
          KUBECONFIG_APP=$(mktemp)
          gcloud container clusters get-credentials ${{ env.ENVIRONMENT }}-${{ env.CLUSTER_NAME }} --region us-central1 --kubeconfig $KUBECONFIG_APP
          
          # Keep this kubeconfig for later use
          cp $KUBECONFIG_APP app-kubeconfig.yaml

      - name: Create ArgoCD cluster secret for the application cluster
        run: |
          # Get application cluster details
          APP_CLUSTER_SERVER=$(kubectl --kubeconfig=app-kubeconfig.yaml config view --minify -o jsonpath='{.clusters[0].cluster.server}')
          APP_CLUSTER_CA=$(kubectl --kubeconfig=app-kubeconfig.yaml config view --minify -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')
          
          # Switch back to management cluster kubeconfig
          export KUBECONFIG=$HOME/.kube/config
          
          # Create ArgoCD cluster secret
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: cluster-${{ env.ENVIRONMENT }}-${{ env.CLUSTER_NAME }}
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: cluster
              environment: managed-by-crossplane
              cluster-name: ${{ env.ENVIRONMENT }}-${{ env.CLUSTER_NAME }}
              environment-type: ${{ env.ENVIRONMENT }}
          type: Opaque
          stringData:
            name: ${{ env.ENVIRONMENT }}-${{ env.CLUSTER_NAME }}
            server: ${APP_CLUSTER_SERVER}
            config: |
              {
                "bearerToken": "",
                "tlsClientConfig": {
                  "insecure": false,
                  "caData": "${APP_CLUSTER_CA}"
                }
              }
          EOF
          
          echo "Application cluster successfully registered with ArgoCD"

      - name: Apply Application for the new cluster
        run: |
          # Apply the multi-cluster ApplicationSet if not already applied
          kubectl apply -f argo-apps/workloads/multi-cluster-app.yaml
          
          echo "Application deployment configured for the cluster"
          echo "ArgoCD will automatically deploy to the cluster based on the ApplicationSet selector"