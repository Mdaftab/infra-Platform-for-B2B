name: Crossplane Bootstrap

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to use'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
  workflow_run:
    workflows: ["Terraform Infrastructure Deployment"]
    types:
      - completed

jobs:
  bootstrap-crossplane:
    name: Install and Configure Crossplane
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.2'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Download Kubeconfig from Previous Workflow
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.inputs.environment || 'dev' }}-kubeconfig
          path: ./tmp

      - name: Set KUBECONFIG Environment Variable
        run: |
          echo "KUBECONFIG=$(pwd)/tmp/kubeconfig.yaml" >> $GITHUB_ENV
          chmod 600 $(pwd)/tmp/kubeconfig.yaml

      - name: Install Crossplane
        run: |
          # Create namespace if it doesn't exist
          kubectl apply -f crossplane/bootstrap/namespace.yaml
          
          # Add Crossplane Helm repository
          kubectl apply -f crossplane/bootstrap/helm-repository.yaml
          
          # Install Crossplane
          kubectl apply -f crossplane/bootstrap/crossplane-helm-release.yaml
          
          # Wait for Crossplane to be ready
          echo "Waiting for Crossplane to be ready..."
          kubectl wait --for=condition=ready pod -l app=crossplane --timeout=300s -n crossplane-system

      - name: Configure Crossplane GCP Provider
        run: |
          # Create GCP service account key secret
          kubectl create secret generic gcp-creds -n crossplane-system --from-literal=credentials=${{ secrets.GCP_SA_KEY }} --dry-run=client -o yaml | kubectl apply -f -
          
          # Install Crossplane Providers
          kubectl apply -f crossplane/bootstrap/providers.yaml
          
          # Wait for providers to be ready
          echo "Waiting for Crossplane providers to be ready..."
          kubectl wait --for=condition=healthy provider.pkg.crossplane.io --all --timeout=300s -n crossplane-system
          
          # Replace project ID in provider configs
          sed -i 's/${PROJECT_ID}/${{ secrets.GCP_PROJECT_ID }}/g' crossplane/bootstrap/provider-configs/gcp-provider-config.yaml
          
          # Apply provider configurations
          kubectl apply -f crossplane/bootstrap/provider-configs/gcp-provider-config.yaml
          kubectl apply -f crossplane/bootstrap/provider-configs/k8s-provider-config.yaml

      - name: Apply Crossplane Compositions
        run: |
          # Apply Crossplane Compositions and XRDs
          kubectl apply -f crossplane/compositions/gke-cluster.yaml
          kubectl apply -f crossplane/xresources/gke-cluster-definition.yaml