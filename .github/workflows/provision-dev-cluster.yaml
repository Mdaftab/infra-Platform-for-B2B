name: Provision Application Clusters with Crossplane

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      email:
        description: 'Email for Let''s Encrypt certificate'
        required: false
        default: 'admin@example.com'
  workflow_run:
    workflows: ["Crossplane Bootstrap"]
    types:
      - completed

jobs:
  provision-cluster:
    name: Provision GKE Cluster with Crossplane
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    env:
      TARGET_ENV: ${{ github.event.inputs.environment || 'dev' }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Download Kubeconfig from Terraform Workflow
        uses: actions/download-artifact@v3
        with:
          name: dev-kubeconfig
          path: ./tmp

      - name: Set KUBECONFIG Environment Variable
        run: |
          echo "KUBECONFIG=$(pwd)/tmp/kubeconfig.yaml" >> $GITHUB_ENV
          chmod 600 $(pwd)/tmp/kubeconfig.yaml

      - name: Prepare and Apply Cluster Claim
        run: |
          # Replace placeholders in cluster claim
          sed -i "s/\${GCP_PROJECT_ID}/${{ secrets.GCP_PROJECT_ID }}/g" crossplane/xresources/${TARGET_ENV}-gke-cluster-claim.yaml
          
          # Apply GKE cluster claim
          echo "Applying ${TARGET_ENV} GKE cluster claim..."
          kubectl apply -f crossplane/xresources/${TARGET_ENV}-gke-cluster-claim.yaml
          
          # Wait for cluster to be ready (this may take some time)
          echo "Waiting for ${TARGET_ENV} GKE cluster to be provisioned (may take 10+ minutes)..."
          kubectl wait --for=condition=ready gkecluster.platform.commercelab.io/${TARGET_ENV}-gke-cluster --timeout=900s
          
          # Get cluster name
          CLUSTER_NAME=$(kubectl get gkecluster.platform.commercelab.io/${TARGET_ENV}-gke-cluster -o jsonpath='{.status.clusterName}')
          echo "${TARGET_ENV} cluster name: $CLUSTER_NAME"
          
          # Get cluster credentials
          gcloud container clusters get-credentials $CLUSTER_NAME --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }}
          
          # Save cluster kubeconfig for future use
          KUBECONFIG_APP="$(pwd)/${TARGET_ENV}-cluster-kubeconfig.yaml"
          gcloud container clusters get-credentials $CLUSTER_NAME --region us-central1 --project ${{ secrets.GCP_PROJECT_ID }} --kubeconfig $KUBECONFIG_APP
          
          # Store cluster kubeconfig
          echo "${TARGET_ENV}_KUBECONFIG_DATA=$(cat $KUBECONFIG_APP | base64 -w 0)" >> $GITHUB_ENV

      - name: Store Application Cluster Kubeconfig
        id: store-app-kubeconfig
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TARGET_ENV }}-cluster-kubeconfig
          path: ${{ env.TARGET_ENV }}-cluster-kubeconfig.yaml
          retention-days: 1
          
      - name: Install Add-ons on Application Cluster
        run: |
          # Set up environment variables
          CLUSTER_NAME=$(kubectl get gkecluster.platform.commercelab.io/${TARGET_ENV}-gke-cluster -o jsonpath='{.status.clusterName}')
          EMAIL="${{ github.event.inputs.email || 'admin@example.com' }}"
          GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          GCP_EXTERNAL_SECRETS_SA="shared-external-secrets-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
          
          echo "Installing add-ons on ${TARGET_ENV} cluster $CLUSTER_NAME..."
          
          # Set context to application cluster
          KUBECONFIG_APP="$(pwd)/${TARGET_ENV}-cluster-kubeconfig.yaml"
          export KUBECONFIG=$KUBECONFIG_APP
          
          # Run the comprehensive add-ons installation script
          ./kubernetes-addons/install.sh "$EMAIL" "$GCP_PROJECT_ID" "$GCP_EXTERNAL_SECRETS_SA"
          
          # Verify add-ons installation
          echo "Verifying add-ons installation..."
          kubectl get pods -n ingress-nginx
          kubectl get pods -n cert-manager
          kubectl get pods -n reloader
          kubectl get pods -n external-secrets
          kubectl get clusterissuer letsencrypt-staging
          
          echo "Add-ons installation complete!"