name: Deploy Application to Cluster

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      domain:
        description: 'Domain name for the application'
        required: false
        default: 'hello-world.example.com'
      email:
        description: 'Email for Let''s Encrypt certificate'
        required: false
        default: 'admin@example.com'
  workflow_run:
    workflows: ["Provision Application Clusters with Crossplane"]
    types:
      - completed

jobs:
  deploy-app:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    env:
      TARGET_ENV: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.11.2'

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker
        run: gcloud auth configure-docker

      - name: Download Application Cluster Kubeconfig
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TARGET_ENV }}-cluster-kubeconfig
          path: ./tmp

      - name: Set KUBECONFIG Environment Variable
        run: |
          echo "KUBECONFIG=$(pwd)/tmp/${{ env.TARGET_ENV }}-cluster-kubeconfig.yaml" >> $GITHUB_ENV
          chmod 600 $(pwd)/tmp/${{ env.TARGET_ENV }}-cluster-kubeconfig.yaml
          
      - name: Verify Add-ons Installation
        run: |
          echo "Verifying Kubernetes add-ons installation on ${{ env.TARGET_ENV }} cluster..."
          
          # Check NGINX Ingress Controller
          if kubectl get service -n ingress-nginx ingress-nginx-controller >/dev/null 2>&1; then
            echo "✅ NGINX Ingress Controller is installed"
            INGRESS_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
            if [ -n "$INGRESS_IP" ]; then
              echo "✅ NGINX Ingress Controller has external IP: $INGRESS_IP"
            else
              echo "⚠️ NGINX Ingress Controller is pending IP assignment"
            fi
          else
            echo "❌ NGINX Ingress Controller is not installed properly"
            echo "Please run kubernetes-addons/install.sh before deploying applications"
            exit 1
          fi
          
          # Check cert-manager
          if kubectl get pods -n cert-manager | grep -q Running; then
            echo "✅ cert-manager is installed"
            
            # Check ClusterIssuers
            if kubectl get clusterissuer letsencrypt-staging >/dev/null 2>&1; then
              echo "✅ Let's Encrypt Staging ClusterIssuer is configured"
            else
              echo "⚠️ Let's Encrypt Staging ClusterIssuer is not configured"
            fi
            
            if kubectl get clusterissuer letsencrypt-prod >/dev/null 2>&1; then
              echo "✅ Let's Encrypt Production ClusterIssuer is configured"
            else
              echo "⚠️ Let's Encrypt Production ClusterIssuer is not configured"
            fi
          else
            echo "❌ cert-manager is not installed properly"
            echo "Please run kubernetes-addons/install.sh before deploying applications"
            exit 1
          fi
          
          # Check Reloader
          if kubectl get pods -n reloader | grep -q Running; then
            echo "✅ Reloader is installed"
          else
            echo "⚠️ Reloader is not installed"
            echo "Some features like automatic config reload may not work"
          fi
          
          # Check External Secrets
          if kubectl get pods -n external-secrets | grep -q Running; then
            echo "✅ External Secrets Operator is installed"
          else
            echo "⚠️ External Secrets Operator is not installed"
            echo "Secret management features may not work"
          fi
          
          echo "Add-ons verification complete. Proceeding with application deployment."

      - name: Build and Push Container Image
        working-directory: workloads/hello-world/app
        run: |
          # Add environment tag to image for environment-specific deployments
          IMAGE_NAME="gcr.io/${{ secrets.GCP_PROJECT_ID }}/hello-world:${{ env.TARGET_ENV }}-${{ github.sha }}"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      - name: Environment-specific Deployment Preparation 
        run: |
          # Set environment-specific values
          case "${{ env.TARGET_ENV }}" in
            dev)
              echo "Setting dev environment configurations..."
              REPLICAS=1
              RESOURCE_LIMITS_CPU="100m"
              RESOURCE_LIMITS_MEMORY="128Mi"
              RESOURCE_REQUESTS_CPU="50m"
              RESOURCE_REQUESTS_MEMORY="64Mi"
              ISSUER="letsencrypt-staging" # Use staging for dev to avoid hitting rate limits
              ;;
            staging)
              echo "Setting staging environment configurations..."
              REPLICAS=2
              RESOURCE_LIMITS_CPU="200m"
              RESOURCE_LIMITS_MEMORY="256Mi"
              RESOURCE_REQUESTS_CPU="100m"
              RESOURCE_REQUESTS_MEMORY="128Mi"
              ISSUER="letsencrypt-staging"
              ;;
            prod)
              echo "Setting production environment configurations..."
              REPLICAS=3
              RESOURCE_LIMITS_CPU="500m"
              RESOURCE_LIMITS_MEMORY="512Mi"
              RESOURCE_REQUESTS_CPU="200m"
              RESOURCE_REQUESTS_MEMORY="256Mi"
              ISSUER="letsencrypt-prod" # Use production for real certificates
              ;;
            *)
              echo "Unknown environment: ${{ env.TARGET_ENV }}"
              exit 1
              ;;
          esac
          
          # Export environment variables for next steps
          echo "REPLICAS=$REPLICAS" >> $GITHUB_ENV
          echo "RESOURCE_LIMITS_CPU=$RESOURCE_LIMITS_CPU" >> $GITHUB_ENV
          echo "RESOURCE_LIMITS_MEMORY=$RESOURCE_LIMITS_MEMORY" >> $GITHUB_ENV
          echo "RESOURCE_REQUESTS_CPU=$RESOURCE_REQUESTS_CPU" >> $GITHUB_ENV
          echo "RESOURCE_REQUESTS_MEMORY=$RESOURCE_REQUESTS_MEMORY" >> $GITHUB_ENV
          echo "ISSUER=$ISSUER" >> $GITHUB_ENV

      - name: Update Helm Values
        working-directory: workloads/hello-world
        run: |
          # Configure domain and settings
          DOMAIN="${{ github.event.inputs.domain || format('hello-world-%s.example.com', env.TARGET_ENV) }}"
          GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}"
          
          # Update image repository and tag in values.yaml
          sed -i "s|repository:.*|repository: gcr.io/$GCP_PROJECT_ID/hello-world|" values.yaml
          sed -i "s|tag:.*|tag: ${{ env.TARGET_ENV }}-${{ github.sha }}|" values.yaml
          
          # Update replica count based on environment
          sed -i "s|replicaCount:.*|replicaCount: ${{ env.REPLICAS }}|" values.yaml
          
          # Update resource requests/limits based on environment
          sed -i "/resources:/,/limits:/ s/cpu:.*/cpu: ${{ env.RESOURCE_LIMITS_CPU }}/" values.yaml
          sed -i "/resources:/,/memory:/ s/memory:.*/memory: ${{ env.RESOURCE_LIMITS_MEMORY }}/" values.yaml
          sed -i "/requests:/,/cpu:/ s/cpu:.*/cpu: ${{ env.RESOURCE_REQUESTS_CPU }}/" values.yaml
          sed -i "/requests:/,/memory:/ s/memory:.*/memory: ${{ env.RESOURCE_REQUESTS_MEMORY }}/" values.yaml
          
          # Update ingress settings for NGINX and TLS
          sed -i "s|className:.*|className: \"nginx\"|" values.yaml
          
          # Make sure we have the right annotations
          grep -q "cert-manager.io/cluster-issuer" values.yaml || \
            sed -i "/annotations:/a\\    cert-manager.io/cluster-issuer: \"${{ env.ISSUER }}\"" values.yaml
          
          grep -q "nginx.ingress.kubernetes.io/ssl-redirect" values.yaml || \
            sed -i "/annotations:/a\\    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"" values.yaml
          
          # Update host name
          sed -i "s|host:.*|host: $DOMAIN|" values.yaml
          
          # Make sure TLS is configured properly
          if ! grep -q "tls:" values.yaml; then
            cat << EOF >> values.yaml
  tls:
  - secretName: hello-world-${{ env.TARGET_ENV }}-tls
    hosts:
    - $DOMAIN
EOF
          else
            sed -i "s|secretName:.*|secretName: hello-world-${{ env.TARGET_ENV }}-tls|" values.yaml
            sed -i "/hosts:/d" values.yaml
            sed -i "/secretName:/a\\    hosts:\\n    - $DOMAIN" values.yaml
          fi
            
          # Enable External Secrets integration
          sed -i 's/useExternalSecrets:.*/useExternalSecrets: true/' values.yaml
          
          # Show final configuration
          echo "Final application configuration for ${{ env.TARGET_ENV }} environment:"
          cat values.yaml

      - name: Deploy Application using Helm
        working-directory: workloads/hello-world
        run: |
          # Create namespace if it doesn't exist
          NAMESPACE="hello-world-${{ env.TARGET_ENV }}"
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          
          # Install/upgrade Helm chart
          helm upgrade --install hello-world-${{ env.TARGET_ENV }} . -n $NAMESPACE

      - name: Wait for Deployment
        run: |
          NAMESPACE="hello-world-${{ env.TARGET_ENV }}"
          
          echo "Waiting for deployment to be available..."
          kubectl wait --for=condition=available deployment/hello-world-${{ env.TARGET_ENV }} --timeout=300s -n $NAMESPACE
          
          # Get deployment details
          echo "Deployment details:"
          kubectl get deployment -n $NAMESPACE -o wide
          
          # Get pod details
          echo "Pod details:"
          kubectl get pods -n $NAMESPACE -o wide
          
          # Get service details
          echo "Service details:"
          kubectl get service -n $NAMESPACE -o wide
          
          # Get ingress details
          echo "Ingress details:"
          kubectl get ingress -n $NAMESPACE -o wide
          
          # Check if TLS certificate is issued
          echo "TLS certificate status:"
          kubectl get certificate -n $NAMESPACE
          
          # Get NGINX Ingress Controller external IP
          echo "Retrieving NGINX Ingress Controller external IP..."
          COUNTER=0
          MAX_RETRIES=15
          
          while [ -z "$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)" ] && [ $COUNTER -lt $MAX_RETRIES ]; do
            echo -n "."
            sleep 10
            COUNTER=$((COUNTER+1))
          done
          echo ""
          
          INGRESS_IP=$(kubectl get service -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$INGRESS_IP" ]; then
            echo "Failed to retrieve Ingress Controller IP. Please check manually."
            INGRESS_IP="<pending>"
          fi
          
          DOMAIN="${{ github.event.inputs.domain || format('hello-world-%s.example.com', env.TARGET_ENV) }}"
          
          echo "============================================================="
          echo "✅ Application successfully deployed to ${{ env.TARGET_ENV }} environment! ✅"
          echo "============================================================="
          echo "📊 Application information:"
          echo "   - Environment:     ${{ env.TARGET_ENV }}"
          echo "   - Namespace:       $NAMESPACE"
          echo "   - Release name:    hello-world-${{ env.TARGET_ENV }}"
          echo "   - Image:           ${{ env.IMAGE_NAME }}"
          echo ""
          echo "🔗 Access URLs:"
          echo "   - Using IP directly:   http://$INGRESS_IP"
          echo "   - With proper DNS:     https://$DOMAIN"
          echo ""
          echo "🔐 TLS:"
          echo "   - Certificate:         hello-world-${{ env.TARGET_ENV }}-tls"
          echo "   - Issuer:              ${{ env.ISSUER }}"
          echo ""
          echo "📝 NOTE: To access the application using the domain name, you need to:"
          echo "   1. Configure your DNS to point $DOMAIN to $INGRESS_IP"
          echo "   2. Or add this entry to your local hosts file:"
          echo "      $INGRESS_IP $DOMAIN"
          echo ""
          echo "🚀 The application is now fully deployed with ingress, TLS, and secrets support! 🚀"
          echo "============================================================="