apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xgkeclusters.platform.commercelab.io
  labels:
    provider: gcp
    service: gke
    type: application-cluster
spec:
  compositeTypeRef:
    apiVersion: platform.commercelab.io/v1alpha1
    kind: XGKECluster
  patchSets:
    - name: common-parameters
      patches:
        - fromFieldPath: spec.clusterVersion
          toFieldPath: spec.forProvider.initialClusterVersion
        - fromFieldPath: spec.nodeConfig.machineType
          toFieldPath: spec.forProvider.nodeConfig[0].machineType
        - fromFieldPath: spec.nodeConfig.diskSizeGb
          toFieldPath: spec.forProvider.nodeConfig[0].diskSizeGb
        - fromFieldPath: spec.nodeConfig.diskType
          toFieldPath: spec.forProvider.nodeConfig[0].diskType
    - name: metadata-patch
      patches:
        - fromFieldPath: metadata.labels
          toFieldPath: metadata.labels
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
    - name: security-config
      patches:
        - fromFieldPath: spec.securityConfig.enableShieldedNodes
          toFieldPath: spec.forProvider.enableShieldedNodes
          policy:
            fromFieldPath: Optional
        - fromFieldPath: spec.securityConfig.enableNetworkPolicy
          toFieldPath: spec.forProvider.networkPolicy[0].enabled
          policy:
            fromFieldPath: Optional
        - fromFieldPath: spec.securityConfig.enableBinaryAuthorization
          toFieldPath: spec.forProvider.binaryAuthorization[0].evaluationMode
          transforms:
            - type: map
              map:
                "true": "PROJECT_SINGLETON_POLICY_ENFORCE"
                "false": "DISABLED"
          policy:
            fromFieldPath: Optional

  resources:
    - name: gke-cluster
      base:
        apiVersion: container.gcp.upbound.io/v1beta1
        kind: Cluster
        metadata:
          annotations:
            crossplane.io/external-name: "$(spec.clusterName)"
          labels:
            crossplane.io/composition: gke-cluster
        spec:
          forProvider:
            location: us-central1
            initialNodeCount: 1
            loggingService: logging.googleapis.com/kubernetes
            monitoringService: monitoring.googleapis.com/kubernetes
            networkingMode: VPC_NATIVE
            removeDefaultNodePool: true
            # IP allocation policy for GKE in shared VPC - use named secondary ranges
            ipAllocationPolicy:
              - clusterSecondaryRangeName: "$(spec.networkConfig.subnetName)-pods"
                servicesSecondaryRangeName: "$(spec.networkConfig.subnetName)-services"
            # Private cluster config
            privateClusterConfig:
              - enablePrivateNodes: $(spec.securityConfig.privateClusterConfig.enablePrivateNodes)
                enablePrivateEndpoint: $(spec.securityConfig.privateClusterConfig.enablePrivateEndpoint)
                masterIpv4CidrBlock: $(spec.securityConfig.privateClusterConfig.masterIpv4CidrBlock)
            # Master authorized networks - include shared VPC subnet for infracluster access
            masterAuthorizedNetworksConfig:
              - cidrBlocks:
                  - cidrBlock: $(spec.securityConfig.privateClusterConfig.masterAuthorizedNetworks[0].cidrBlock)
                    displayName: "Infracluster Subnet Access"
            # Shared VPC references - host project with service project
            network: projects/$(spec.networkConfig.hostProjectID)/global/networks/$(spec.networkConfig.networkName)
            subnetwork: projects/$(spec.networkConfig.hostProjectID)/regions/$(spec.location)/subnetworks/$(spec.networkConfig.subnetName)
            releaseChannel:
              - channel: $(spec.releaseChannel)
            datapathProvider: ADVANCED_DATAPATH
            workloadIdentityConfig:
              - workloadPool: $(spec.projectID).svc.id.goog
            addonsConfig:
              - httpLoadBalancing:
                  - disabled: false
                horizontalPodAutoscaling:
                  - disabled: false
                networkPolicyConfig:
                  - disabled: false
                gceFilestoreCsiDriverConfig:
                  - enabled: true
                gcePersistentDiskCsiDriverConfig:
                  - enabled: true
            verticalPodAutoscaling:
              - enabled: true
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:
        # Patch standard metadata
        - type: PatchSet
          patchSetName: metadata-patch

        # Patch provider configuration
        - fromFieldPath: spec.providerConfigRef.name
          toFieldPath: spec.providerConfigRef.name

        # Patch project ID
        - fromFieldPath: spec.projectID
          toFieldPath: spec.forProvider.projectID
        
        # Patch location
        - fromFieldPath: spec.location
          toFieldPath: spec.forProvider.location

        # Patch version
        - fromFieldPath: spec.clusterVersion
          toFieldPath: spec.forProvider.minMasterVersion
        
        # Patch connection secret config
        - fromFieldPath: metadata.uid
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "gke-cluster-%s"
                
        # Apply security config patches
        - type: PatchSet
          patchSetName: security-config

        # Patch maintenance policy
        - fromFieldPath: spec.maintenanceWindow.startTime
          toFieldPath: spec.forProvider.maintenancePolicy[0].dailyMaintenanceWindow[0].startTime
          transforms:
            - type: string
              string:
                fmt: "%s:00"
                
        # Patch maintenance recurrence if specified
        - fromFieldPath: spec.maintenanceWindow.recurrence
          toFieldPath: spec.forProvider.maintenancePolicy[0].recurringWindow[0].recurrence
          policy:
            fromFieldPath: Optional
            
        # Patch maintenance exclusion windows for production
        - fromFieldPath: spec.highAvailabilityConfig.maintenanceExclusionWindows
          toFieldPath: spec.forProvider.maintenancePolicy[0].maintenanceExclusion
          policy:
            fromFieldPath: Optional
            
        # Patch regional configuration
        - fromFieldPath: spec.highAvailabilityConfig.regionalCluster
          toFieldPath: spec.forProvider.location
          transforms:
            - type: map
              map:
                "true": "$(spec.location)"
                "false": "$(spec.location)-a"
          policy:
            fromFieldPath: Optional

    - name: gke-node-pool
      base:
        apiVersion: container.gcp.upbound.io/v1beta1
        kind: NodePool
        metadata:
          annotations:
            crossplane.io/external-name: "$(spec.clusterName)-nodes"
          labels:
            crossplane.io/composition: gke-node-pool
        spec:
          forProvider:
            location: $(spec.location)
            cluster: $(spec.clusterName)
            nodeCount: 1
            management:
              - autoRepair: true
                autoUpgrade: true
            maxPodsPerNode: 110
            nodeConfig:
              - diskSizeGb: 100
                diskType: pd-standard
                imageType: COS_CONTAINERD
                machineType: e2-standard-2
                oauthScopes:
                  - https://www.googleapis.com/auth/logging.write
                  - https://www.googleapis.com/auth/monitoring
                  - https://www.googleapis.com/auth/devstorage.read_only
                serviceAccount: $(spec.nodeConfig.serviceAccount)
                metadata:
                  disable-legacy-endpoints: "true"
                shieldedInstanceConfig:
                  - enableIntegrityMonitoring: $(spec.securityConfig.enableIntegrityMonitoring)
                    enableSecureBoot: $(spec.securityConfig.enableSecureBoot)
                workloadMetadataConfig:
                  - mode: GKE_METADATA
                labels:
                  environment: $(common.metadata.labels.environment)
                  role: $(common.metadata.labels.role)
      patches:
        # Patch standard metadata
        - type: PatchSet
          patchSetName: metadata-patch

        # Patch provider configuration
        - fromFieldPath: spec.providerConfigRef.name
          toFieldPath: spec.providerConfigRef.name
          
        # Patch project ID
        - fromFieldPath: spec.projectID
          toFieldPath: spec.forProvider.projectID

        # Link to cluster
        - fromFieldPath: spec.clusterName
          toFieldPath: spec.forProvider.cluster

        # Patch location
        - fromFieldPath: spec.location
          toFieldPath: spec.forProvider.location

        # Patch location based on high availability config
        - fromFieldPath: spec.highAvailabilityConfig.regionalCluster
          toFieldPath: spec.forProvider.location
          transforms:
            - type: map
              map:
                "true": "$(spec.location)"
                "false": "$(spec.location)-a"
          policy:
            fromFieldPath: Optional

        # Patch common parameters
        - type: PatchSet
          patchSetName: common-parameters

        # Patch node count
        - fromFieldPath: spec.nodeConfig.nodeCount
          toFieldPath: spec.forProvider.nodeCount

        # Patch autoscaling if enabled
        - fromFieldPath: spec.nodeConfig.autoscaling.minNodeCount
          toFieldPath: spec.forProvider.autoscaling[0].minNodeCount
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.nodeConfig.autoscaling.maxNodeCount
          toFieldPath: spec.forProvider.autoscaling[0].maxNodeCount
          policy:
            fromFieldPath: Required

        # Patch node labels if provided
        - fromFieldPath: spec.nodeConfig.labels
          toFieldPath: spec.forProvider.nodeConfig[0].labels
          policy:
            fromFieldPath: Optional